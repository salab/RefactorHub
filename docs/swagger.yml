openapi: 3.0.0
info:
  title: RefactorHub
  description: RefactorHub API
  version: 2.0.0

servers:
  - url: "https://refactorhub.com/api"
    description: production
  - url: "http://localhost:8080/api"
    description: local

tags:
  - name: users
    description: User
  - name: annotations
    description: Annotation
  - name: annotations/snapshots
    description: Snapshot of Annotation
  - name: annotations/snapshots/changes
    description: Change belonging to Snapshot of Annotation
  - name: annotations/snapshots/changes/parameters
    description: Parameter of Change belonging to Snapshot of Annotation
  - name: changeTypes
    description: ChangeType
  - name: codeElementTypes
    description: CodeElementType
  - name: experiments
    description: Experiment
  - name: actions
    description: Action

paths:
  "/users/me":
    get:
      summary: get logged-in user
      operationId: getMe
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: You are not logged in
        "404":
          description: The user is not found
      tags:
        - users
  "/users/{userId}/annotations":
    parameters:
      - $ref: "#/components/parameters/userIdInPath"
    get:
      summary: get annotation ids the user created
      operationId: getUserAnnotationIds
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    experimentId:
                      type: string
                      format: uuid
                    commitId:
                      type: string
                      format: uuid
                    annotationId:
                      type: string
                      format: uuid
                    isDraft:
                      type: string
                      format: boolean
                  required:
                    - experimentId
                    - commitId
                    - annotationId
                    - isDraft
        "404":
          description: The user is not found
      tags:
        - users

  "/annotations/{annotationId}":
    parameters:
      - $ref: "#/components/parameters/annotationIdInPath"
    get:
      summary: get an annotation
      operationId: getAnnotation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        "404":
          description: Annotation is not found
      tags:
        - annotations
    patch:
      summary: update isDraft of the annotation
      operationId: publishAnnotation
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isDraft:
                  type: boolean
              required:
                - isDraft
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  isDraft:
                    type: boolean
                required:
                  - isDraft
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation is not found
      tags:
        - annotations
  "/annotations/{annotationId}/data":
    parameters:
      - $ref: "#/components/parameters/annotationIdInPath"
    post:
      summary: get the annotation data
      operationId: getAnnotationData
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationData"
        "404":
          description: The annotation is not found
      tags:
        - annotations
  "/annotations/{annotationId}/snapshots":
    parameters:
      - $ref: "#/components/parameters/annotationIdInPath"
    post:
      summary: append a temporary snapshot based on range of parameters of the specified change belonging to the trailing snapshot
      operationId: appendTemporarySnapshot
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                changeId:
                  type: string
                  format: uuid
              required:
                - changeId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasTemporarySnapshot:
                    type: boolean
                  snapshots:
                    type: array
                    items:
                      $ref: "#/components/schemas/Snapshot"
                required:
                  - hasTemporarySnapshot
                  - snapshots
        "400":
          description: The specified change is not belonging to the trailing snapshot
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation is not found
        "409":
          description: The annotation already has a temporary snapshot
      tags:
        - annotations/snapshots
    put:
      summary: |-
        put the fileContent in the specified filePath in the temporary snapshot.
        If isRemoved is true, the file will be removed.
      operationId: modifyTemporarySnapshot
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filePath:
                  type: string
                fileContent:
                  type: string
                isRemoved:
                  type: boolean
              required:
                - filePath
                - fileContent
                - isRemoved
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  snapshots:
                    type: array
                    items:
                      $ref: "#/components/schemas/Snapshot"
                required:
                  - snapshots
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation is not found
        "409":
          description: The annotation does not have a temporary snapshot
      tags:
        - annotations/snapshots
    patch:
      summary: settle the temporary snapshot
      operationId: settleTemporarySnapshot
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasTemporarySnapshot:
                    type: boolean
                required:
                  - hasTemporarySnapshot
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation is not found
        "409":
          description: The annotation does not have a temporary snapshot
      tags:
        - annotations/snapshots
  "/annotations/{annotationId}/snapshots/{snapshotId}/changes":
    parameters:
      - $ref: "#/components/parameters/annotationIdInPath"
      - $ref: "#/components/parameters/snapshotIdInPath"
    post:
      summary: append a new change to the snapshot
      operationId: appendChange
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snapshot"
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation or snapshot is not found
      tags:
        - annotations/snapshots/changes
  "/annotations/{annotationId}/snapshots/{snapshotId}/changes/{changeId}":
    parameters:
      - $ref: "#/components/parameters/annotationIdInPath"
      - $ref: "#/components/parameters/snapshotIdInPath"
      - $ref: "#/components/parameters/changeIdInPath"
    patch:
      summary: |-
        update description or typeName of the change.
        When the value of typeName is changed, parameters will be replaced.
      operationId: updateChange
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                typeName:
                  type: string
              required:
                - description
                - typeName
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Change"
        "400":
          description: The typeName is not valid
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation or snapshot or change is not found
      tags:
        - annotations/snapshots/changes
    delete:
      summary: |-
        remove the change from the snapshot.
        If changes do not exist in any snapshots after the snapshot to which the removed change belongs, the snapshot will also be removed.
      operationId: removeChange
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasTemporarySnapshot:
                    type: boolean
                  snapshots:
                    type: array
                    items:
                      $ref: "#/components/schemas/Snapshot"
                required:
                  - hasTemporarySnapshot
                  - snapshots
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation or snapshot or change is not found
      tags:
        - annotations/snapshots/changes
  "/annotations/{annotationId}/snapshots/{snapshotId}/changes/{changeId}/{diffCategory}":
    parameters:
      - $ref: "#/components/parameters/annotationIdInPath"
      - $ref: "#/components/parameters/snapshotIdInPath"
      - $ref: "#/components/parameters/changeIdInPath"
      - $ref: "#/components/parameters/diffCategoryInPath"
    put:
      summary: put a new parameter on parameterData[diffCategory] of the change
      operationId: putNewParameter
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                parameterName:
                  type: string
                elementType:
                  type: string
                multiple:
                  type: boolean
              required:
                - parameterName
                - elementType
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Change"
        "400":
          description: Bad Request
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation or snapshot or change is not found
      tags:
        - annotations/snapshots/changes/parameters
  "/annotations/{annotationId}/snapshots/{snapshotId}/changes/{changeId}/{diffCategory}/{parameterName}":
    parameters:
      - $ref: "#/components/parameters/annotationIdInPath"
      - $ref: "#/components/parameters/snapshotIdInPath"
      - $ref: "#/components/parameters/changeIdInPath"
      - $ref: "#/components/parameters/diffCategoryInPath"
      - $ref: "#/components/parameters/parameterNameInPath"
    post:
      summary: append a default parameter element to parameterData[diffCategory][parameterName].elements of the change
      operationId: appendParameterElement
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Change"
        "400":
          description: Bad Request
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation or snapshot or change is not found
      tags:
        - annotations/snapshots/changes/parameters
    delete:
      summary: remove the parameter from parameterData[diffCategory] of the change
      operationId: removeParameter
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Change"
        "400":
          description: Bad Request
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation or snapshot or change is not found
      tags:
        - annotations/snapshots/changes/parameters
    patch:
      summary: verify the parameter at parameterData[diffCategory][parameterName]
      operationId: verifyParameter
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isVerified:
                  type: boolean
              required:
                - isVerified
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Change"
        "400":
          description: Bad Request
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation or snapshot or change is not found
      tags:
        - annotations/snapshots/changes/parameters
  "/annotations/{annotationId}/snapshots/{snapshotId}/changes/{changeId}/{diffCategory}/{parameterName}/{elementIndex}":
    parameters:
      - $ref: "#/components/parameters/annotationIdInPath"
      - $ref: "#/components/parameters/snapshotIdInPath"
      - $ref: "#/components/parameters/changeIdInPath"
      - $ref: "#/components/parameters/diffCategoryInPath"
      - $ref: "#/components/parameters/parameterNameInPath"
      - $ref: "#/components/parameters/elementIndexInPath"
    patch:
      summary: |-
        update the parameter value at parameterData[diffCategory][parameterName].elements[elementIndex].
        Valid even for non-multiple parameters (in that case, elementIndex is 0).
      operationId: updateParameterValue
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                element:
                  $ref: "#/components/schemas/CodeElement"
              required:
                - element
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Change"
        "400":
          description: Bad Request
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation or snapshot or change is not found
      tags:
        - annotations/snapshots/changes/parameters
    delete:
      summary: |-
        clear the parameter value at parameterData[diffCategory][parameterName].elements[elementIndex].
        Valid even for non-multiple parameters (in that case, elementIndex is 0).
      operationId: clearParameterValue
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Change"
        "400":
          description: Bad Request
        "401":
          description: You are not logged in
        "403":
          description: You are not the owner
        "404":
          description: The annotation or snapshot or change is not found
      tags:
        - annotations/snapshots/changes/parameters

  "/change_types":
    get:
      summary: get all change types
      operationId: getChangeTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChangeType"
      tags:
        - changeTypes
    post:
      summary: create a new change type
      operationId: createChangeType
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                before:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/CodeElementMetadata"
                after:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/CodeElementMetadata"
                description:
                  type: string
                referenceUrl:
                  type: string
              required:
                - name
                - before
                - after
                - description
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangeType"
        "400":
          description: This name already exists
        "401":
          description: You are not logged in
      tags:
        - changeTypes

  "/code_element_types":
    get:
      summary: get all CodeElement types
      operationId: getCodeElementTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - codeElementTypes

  "/experiments":
    get:
      summary: get experiments
      operationId: getExperiments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Experiment"
      tags:
        - experiments
    post:
      summary: create a new experiment
      operationId: createExperiment
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                commits:
                  type: array
                  items:
                    type: object
                    properties:
                      owner:
                        type: string
                      repository:
                        type: string
                      sha:
                        type: string
                    required:
                      - owner
                      - repository
                      - sha
              required:
                - title
                - description
                - commits
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Experiment"
        "400":
          description: First commit is not supported
        "401":
          description: You are not logged in
        "404":
          description: One of the commits is not found
      tags:
        - experiments
  "/experiments/{experimentId}":
    parameters:
      - $ref: "#/components/parameters/experimentIdInPath"
    get:
      summary: get the experiment
      operationId: getExperiment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Experiment"
        "404":
          description: The experiment is not found
      tags:
        - experiments
  "/experiments/{experimentId}/commits/{commitId}":
    parameters:
      - $ref: "#/components/parameters/experimentIdInPath"
      - $ref: "#/components/parameters/commitIdInPath"
    post:
      summary: start annotation of the commit and get annotation id
      operationId: startAnnotation
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "401":
          description: You are not logged in
        "404":
          description: The experiment or commit is not found
      tags:
        - experiments
  "/experiments/{experimentId}/result":
    parameters:
      - $ref: "#/components/parameters/experimentIdInPath"
    get:
      summary: get the experiment result
      operationId: getExperimentResult
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnnotationData"
        "401":
          description: You are not logged in
        "404":
          description: The experiment is not found
      tags:
        - experiments

  "/actions":
    post:
      summary: logging actions
      operationId: postAction
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/ActionName"
                type:
                  $ref: "#/components/schemas/ActionType"
                data:
                  type: object
              required:
                - name
                - type
                - data
      responses:
        "200":
          description: OK
        "401":
          description: You are not logged in
      tags:
        - actions

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: app_session

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name

    Commit:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner:
          type: string
        repository:
          type: string
        sha:
          type: string
        parentSha:
          type: string
        url:
          type: string
        message:
          type: string
        authorName:
          type: string
        authoredDateTime:
          type: string
          format: date-time
        beforeFiles:
          type: array
          items:
            $ref: "#/components/schemas/FileModel"
        afterFiles:
          type: array
          items:
            $ref: "#/components/schemas/FileModel"
        fileMappings:
          type: array
          items:
            $ref: "#/components/schemas/FileMapping"
        patch:
          type: string
      required:
        - id
        - owner
        - repository
        - sha
        - parentSha
        - url
        - message
        - authorName
        - authoredDateTime
        - beforeFiles
        - afterFiles
        - fileMappings
        - patch
    CommitOverview:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner:
          type: string
        repository:
          type: string
        sha:
          type: string
        url:
          type: string
        message:
          type: string
      required:
        - id
        - owner
        - repository
        - sha
        - url
        - message
    FileModel:
      type: object
      properties:
        path:
          type: string
        text:
          type: string
        extension:
          type: string
        elements:
          type: array
          items:
            $ref: "#/components/schemas/CodeElement"
        tokens:
          type: array
          items:
            $ref: "#/components/schemas/Token"
      required:
        - path
        - text
        - extension
        - elements
        - tokens
    FileMapping:
      type: object
      properties:
        status:
          type: string
          enum: [modified, added, removed, renamed, unmodified]
        beforePath:
          type: string
        afterPath:
          type: string
        diffHunks:
          type: array
          items:
            $ref: "#/components/schemas/DiffHunk"
      required:
        - status
        - diffHunks
    DiffHunk:
      type: object
      properties:
        before:
          $ref: "#/components/schemas/Hunk"
        after:
          $ref: "#/components/schemas/Hunk"
    Hunk:
      type: object
      properties:
        startLine:
          type: integer
        endLine:
          type: integer
        oppositeLine:
          type: integer
      required:
        - startLine
        - endLine
        - oppositeLine

    Annotation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ownerId:
          type: string
          format: uuid
        commit:
          $ref: "#/components/schemas/Commit"
        experimentId:
          type: string
          format: uuid
        isDraft:
          type: boolean
        hasTemporarySnapshot:
          type: boolean
        snapshots:
          type: array
          items:
            $ref: "#/components/schemas/Snapshot"
      required:
        - id
        - ownerId
        - commit
        - isDraft
        - snapshots
    Snapshot:
      type: object
      properties:
        id:
          type: string
          format: uuid
        files:
          type: array
          items:
            $ref: "#/components/schemas/FileModel"
        fileMappings:
          type: array
          items:
            $ref: "#/components/schemas/FileMapping"
        patch:
          type: string
        changes:
          type: array
          items:
            $ref: "#/components/schemas/Change"
      required:
        - id
        - files
        - fileMappings
        - patch
        - changes
    Change:
      type: object
      properties:
        id:
          type: string
          format: uuid
        typeName:
          type: string
        description:
          type: string
        parameterData:
          $ref: "#/components/schemas/ParameterData"
      required:
        - id
        - type
        - description
        - parameterData
    ChangeType:
      type: object
      properties:
        name:
          type: string
        ownerId:
          type: string
          format: uuid
        before:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CodeElementMetadata"
        after:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CodeElementMetadata"
        description:
          type: string
        referenceUrl:
          type: string
        tags:
          type: array
          items:
            type: string
      required:
        - name
        - ownerId
        - before
        - after
        - description
        - referenceUrl
        - tags
    ParameterData:
      type: object
      properties:
        before:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CodeElementHolder"
        after:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CodeElementHolder"
      required:
        - before
        - after

    Experiment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ownerId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        targetCommits:
          type: array
          items:
            $ref: "#/components/schemas/CommitOverview"
      required:
        - id
        - ownerId
        - title
        - description
        - isActive
        - targetCommits

    CodeElement:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/CodeElementType"
        location:
          $ref: "#/components/schemas/Location"
      required:
        - type
    CodeElementType:
      type: string
      enum:
        [
            PackageDeclaration,
            TypeDeclaration,
            ClassDeclaration,
            InterfaceDeclaration,
            EnumDeclaration,
            FieldDeclaration,
            FieldType,
            MethodDeclaration,
            ConstructorDeclaration,
            ReturnType,
            ParameterDeclaration,
            ParameterType,
            MethodInvocation,
            VariableDeclaration,
            VariableType,
            SimpleName,
            Statement,
            CodeFragment,
        ]
    CodeElementHolder:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/CodeElementType"
        multiple:
          type: boolean
        elements:
          type: array
          items:
            $ref: "#/components/schemas/CodeElement"
        state:
          $ref: "#/components/schemas/CodeElementHolderState"
      required:
        - type
        - multiple
        - elements
        - state
    CodeElementHolderState:
      type: string
      enum: [None, Autofill, Manual]
    CodeElementMetadata:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/CodeElementType"
        multiple:
          type: boolean
        required:
          type: boolean
        autofills:
          type: array
          items:
            $ref: "#/components/schemas/Autofill"
        description:
          type: string
      required:
        - type
        - multiple
        - required
        - autofills
        - description

    Location:
      type: object
      properties:
        path:
          type: string
        range:
          $ref: "#/components/schemas/Range"
      required:
        - path
    Range:
      type: object
      properties:
        startLine:
          type: integer
        startColumn:
          type: integer
        endLine:
          type: integer
        endColumn:
          type: integer
      required:
        - startLine
        - startColumn
        - endLine
        - endColumn

    Autofill:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/AutofillType"
        follows:
          type: array
          items:
            $ref: "#/components/schemas/Follow"
    AutofillType:
      type: string
      enum: [Reference, Surround, Package]
    Follow:
      type: object
      properties:
        category:
          type: string
          enum: [before, after]
        name:
          type: string
      required:
        - category
        - name

    Token:
      type: object
      properties:
        raw:
          type: string
          description: the raw string of this token
        start:
          type: integer
          description: where raw[0] is in the file text (0-indexed)
        end:
          type: integer
          description: where raw[raw.length-1] is in the file text (0-indexed)
        isSymbol:
          type: boolean
          description: whether this token is a symbol such as ";", ".", "+=", "("......
        isComment:
          type: boolean
          description: whether this token is a comment such as "// comment", "/* block comment */", "/** JavaDoc */"
      required:
        - raw
        - start
        - end
        - isSymbol
        - isComment

    AnnotationData:
      type: object
      properties:
        annotatorName:
          type: string
        commit:
          type: object
          properties:
            owner:
              type: string
            repository:
              type: string
            sha:
              type: string
          required:
            - owner
            - repository
            - sha
        snapshots:
          type: array
          items:
            type: object
            properties:
              patch:
                type: string
              changes:
                type: array
                items:
                  type: object
                  properties:
                    typeName:
                      type: string
                    description:
                      type: string
                    parameterData:
                      $ref: "#/components/schemas/ParameterData"
                  required:
                    - type
                    - description
                    - parameterData
            required:
              - patch
              - changes
      required:
        - annotatorName
        - commit
        - snapshots

    Action:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/ActionName"
        type:
          $ref: "#/components/schemas/ActionType"
        user:
          type: integer
        time:
          type: string
          format: date-time
        data:
          type: object
      required:
        - name
        - type
        - time
        - data
    ActionType:
      type: string
      enum: [Server, Client]
    ActionName:
      type: string
      enum:
        [
          OpenExperiments,
          OpenExperiment,
          StartAnnotation,
          OpenAnnotation,

          UpdateViewers,
          ChangeMainViewer,

          FilterChangeType,
          SwitchCurrentChange,
          OpenChangeInformation,

          OpenElementLocation,
          ToggleEditingElement,
          HoverElement,
          ToggleOpeningParameterList,

          ChangeCommonTokenSequencesSetting,
          HoverCommonTokenSequences,
          SearchCommonTokenSequences,
          CloseCommonTokenSequencesSearchResult,
          ShowPreviousCommonTokenSequence,
          ShowNextCommonTokenSequence,
        ]

  parameters:
    userIdInPath:
      name: userId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    annotationIdInPath:
      name: annotationId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    snapshotIdInPath:
      name: snapshotId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    changeIdInPath:
      name: changeId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    diffCategoryInPath:
      name: diffCategory
      in: path
      required: true
      schema:
        type: string
        enum: [before, after]
    parameterNameInPath:
      name: parameterName
      in: path
      required: true
      schema:
        type: string
    elementIndexInPath:
      name: elementIndex
      in: path
      required: true
      schema:
        type: integer
    experimentIdInPath:
      name: experimentId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    commitIdInPath:
      name: commitId
      in: path
      required: true
      schema:
        type: string
        format: uuid
